import logging
import os
from aiogram import Dispatcher, F
from aiogram.types import Message
from aiogram.filters import Command, CommandObject
from aiogram.types import LabeledPrice, PreCheckoutQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder, InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo
from app.settings import bot
from app.handlers.events import start_bot, stop_bot
from app.utils import check_amount
import app.database.requests as rq
# import subprocess
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
dp = Dispatcher()

dp.startup.register(start_bot)
dp.shutdown.register(stop_bot)
crypto = os.environ["CRYPTO"]


@dp.message(Command("start"))
async def cmd_start(message: Message):
    await rq.set_user(message.from_user.id)
    web_app_button = InlineKeyboardButton(
        text="üéÆ –ü–æ–ø–æ–ª–Ω–∏—Ç—å STEAM",
        web_app=WebAppInfo(url=os.environ["URL"])
    )

    # –°–æ–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[web_app_button]])

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
    await message.answer(
        "üí≥ <b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞ Steam –¥–ª—è –†–§ –∏ –°–ù–ì</b>\n"
        "‚îî –ö–æ–º–∏—Å—Å–∏—è –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã: 2%\n\n"
        "üîÑ <b>–ü–æ—Ç–µ—Ä–∏ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤–∞–ª—é—Ç—ã</b>\n"
        "‚îî –î–æ 10% (–º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥)\n\n"
        "‚ÑπÔ∏è –ë–æ—Ç –Ω–µ –±–µ—Ä–µ—Ç –∫–æ–º–∏—Å—Å–∏—é —Å –ø–ª–∞—Ç–µ–∂–µ–π.\n"
        "–ü–æ—ç—Ç–æ–º—É –≤—Å–µ–≥–¥–∞ —Ä–∞–¥—ã –í–∞—à–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–µ\n"
        "/donate <i>—Å—É–º–º–∞</i>‚≠êÔ∏è\n"
        f"–ò–ª–∏ crypto: <code>{crypto}</code>",
        reply_markup=keyboard, parse_mode="HTML"
    )


@dp.message(Command("donate"))
async def send_invoice_handler(message: Message, command: CommandObject):
    prices = [LabeledPrice(label="XTR", amount=check_amount(command.args))]
    await message.answer_invoice(
        title="–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–∞–Ω–∞–ª–∞",
        description=f"–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å —Å–µ—Ä–≤–∏—Å –Ω–∞ {check_amount(command.args)} ‚≠êÔ∏è!",
        prices=prices,
        provider_token="",
        payload="channel_support",
        currency="XTR",
        reply_markup=payment_keyboard(check_amount(command.args)),
    )
    logging.info("–ó–∞–ø—É—Å–∫–∞—é –∏–Ω–≤–æ–π—Å")


def payment_keyboard(amount):
    builder = InlineKeyboardBuilder()
    builder.button(text=f"–û–ø–ª–∞—Ç–∏—Ç—å {amount} ‚≠êÔ∏è", pay=True)

    return builder.as_markup()


@dp.pre_checkout_query()
async def pre_checkout_handler(pre_checkout_query: PreCheckoutQuery):
    logging.info("–ó–∞–ø—É—Å–∫–∞—é pre_checkout_handler")
    await pre_checkout_query.answer(ok=True)


@dp.message(F.successful_payment)
async def success_payment_handler(message: Message):

    await message.answer(text="ü•≥–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –ø–æ–¥–¥–µ—Ä–∂–∫—É!ü§ó")


if __name__ == "__main__":
    logging.basicConfig(
        level=logging.INFO,
        format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
    )
    dp.run_polling(bot)
